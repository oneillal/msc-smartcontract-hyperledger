/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace me.lend.contracts.peer2peerlibrary

import org.accordproject.cicero.runtime.*
import org.accordproject.time.*
import org.accordproject.money.*

contract Peer2PeerLibrary over Peer2PeerLibraryContract state Peer2PeerLibraryContractState {
  clause peer2peerlibrary(request : Peer2PeerLibraryContractRequest) : Peer2PeerLibraryContractResponse emits PaymentObligation {
    // Prevent overdue return clause before actual return date
    let agreed = request.agreedReturn;
    let actual = request.returnedOn;
    enforce isBefore(agreed,actual) else
    throw ErgoErrorResponse{ message : "Cannot exercise overdue return clause before agreed return date" };

    enforce !contract.exceptionCase or !request.exceptionCase else
    return Peer2PeerLibraryContractResponse{
      itemName: request.itemName,
      fine: 0.0
    }
    ;
    
    // Calculate difference between the actual return date and agreed return date
    let diff = diffDurationAs(actual,agreed,~org.accordproject.time.TemporalUnit.days);
    let diffRatio = divideDuration(diff,durationAs(contract.fineDuration,~org.accordproject.time.TemporalUnit.days));
    // Calculate total fine
    let fine = diffRatio * contract.fineAmount;
    // Cap pelanty fee
    let capped = min([fine, contract.capPercentage/100.0 * request.itemValue]);
    // Return the contract payment obligation
    emit PaymentObligation{
			contract: contract,
			promisor: some(contract.lender),
			promisee: some(contract.borrower),
			deadline: none,
			amount: MonetaryAmount{ doubleValue: capped, currencyCode: EUR },
			description: contract.borrower.partyId ++ " should pay fine amount to " ++ contract.lender.partyId ++ " for the late return of " ++ request.itemName
		};
    let newFinesBalance = state.finesBalance + capped;
    let newCounter = state.counter + 1.0;
    set state Peer2PeerLibraryContractState{
      stateId: "me.lend.contracts.peer2peerlibrary.Peer2PeerLibraryContractState#"  ++ toString(state.counter),
      counter: newCounter,
      finesBalance: newFinesBalance
    };
    // Return response with capped fine fee
    return Peer2PeerLibraryContractResponse{
      itemName: request.itemName,
      fine: capped
    }
  }
}
